/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"encoding/json"
	"reflect"
	"strings"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/util/intstr"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	v1alpha1 "github.com/tsuru/acl-operator/api/v1alpha1"
	corev1 "k8s.io/api/core/v1"
	netv1 "k8s.io/api/networking/v1"
	k8sErrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var requeueAfter = time.Minute * 10

// ACLReconciler reconciles a ACL object
type ACLReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the ACL object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.12.1/pkg/reconcile
func (r *ACLReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx)

	acl := &v1alpha1.ACL{}
	err := r.Client.Get(ctx, req.NamespacedName, acl)
	if k8sErrors.IsNotFound(err) {
	} else if err != nil {
		l.Error(err, "could not get ACL object")
		return ctrl.Result{}, err
	}

	networkPolicy := &netv1.NetworkPolicy{}
	networkPolicyName := acl.Status.NetworkPolicy
	if networkPolicyName == "" {
		networkPolicyName = "acl-" + req.Name
	}

	err = r.Client.Get(ctx, client.ObjectKey{
		Namespace: req.Namespace,
		Name:      networkPolicyName,
	}, networkPolicy)

	if k8sErrors.IsNotFound(err) {
	} else if err != nil {
		l.Error(err, "could not get NetworkPolicy object")
		return ctrl.Result{}, err
	}

	networkPolicyHasChanges := false
	statusNeedsUpdate := false
	networkPolicy.ObjectMeta.Namespace = acl.ObjectMeta.Namespace
	networkPolicy.ObjectMeta.Name = networkPolicyName

	if len(networkPolicy.OwnerReferences) == 0 {
		networkPolicy.OwnerReferences = []v1.OwnerReference{
			*metav1.NewControllerRef(acl, acl.GroupVersionKind()),
		}

		networkPolicyHasChanges = true
	}

	if (len(networkPolicy.Spec.PolicyTypes) == 1 && networkPolicy.Spec.PolicyTypes[0] != netv1.PolicyTypeEgress) || len(networkPolicy.Spec.PolicyTypes) != 1 {
		networkPolicy.Spec.PolicyTypes = []netv1.PolicyType{
			netv1.PolicyTypeEgress,
		}
		networkPolicyHasChanges = true
	}

	podSelector := r.podSelectorForSource(acl.Spec.Source)
	if podSelector == nil {
		err = r.setUnreadyStatus(ctx, acl, "No podSelector generated by spec.source")
		return ctrl.Result{}, err
	}

	if !reflect.DeepEqual(networkPolicy.Spec.PodSelector.MatchLabels, podSelector) {
		networkPolicy.Spec.PodSelector.MatchLabels = podSelector
		networkPolicyHasChanges = true
	}

	newEgressRules := []netv1.NetworkPolicyEgressRule{}
	for _, destination := range acl.Spec.Destinations {
		egressRules, err := r.egressRulesForDestination(ctx, destination)
		if err != nil {
			destinationJSON, _ := json.Marshal(destination)
			l.Error(err, "could not generate egress rule for destination", "destination", string(destinationJSON))
			err = r.setUnreadyStatus(ctx, acl, "could not generate egress rule for destination "+string(destinationJSON))
			return ctrl.Result{}, err
		}
		newEgressRules = append(newEgressRules, egressRules...)
	}

	if len(newEgressRules) == 0 {
		err = r.setUnreadyStatus(ctx, acl, "No egress generated by spec.destinations")
		return ctrl.Result{}, err
	}

	if !reflect.DeepEqual(networkPolicy.Spec.Egress, newEgressRules) {
		networkPolicy.Spec.Egress = newEgressRules
		networkPolicyHasChanges = true
	}

	if networkPolicy.CreationTimestamp.IsZero() {
		err = r.Client.Create(ctx, networkPolicy)
		if err != nil {
			l.Error(err, "could not create NetworkPolicy object")
			return ctrl.Result{}, err
		}
		l.Info("NetworkPolicy object has been created")

		acl.Status.NetworkPolicy = networkPolicy.Name
		acl.Status.Ready = true
		acl.Status.Reason = ""
		statusNeedsUpdate = true

	} else if networkPolicyHasChanges {
		err = r.Client.Update(ctx, networkPolicy)
		if err != nil {
			l.Error(err, "could not update NetworkPolicy object")
			return ctrl.Result{}, err
		}

		l.Info("NetworkPolicy object has been updated")

		acl.Status.NetworkPolicy = networkPolicy.Name
		acl.Status.Ready = true
		acl.Status.Reason = ""
		statusNeedsUpdate = true
	}

	if statusNeedsUpdate {
		err = r.Client.Status().Update(ctx, acl)
		if err != nil {
			l.Error(err, "could not update status for ACL object")
			return ctrl.Result{}, err
		}
	}

	return ctrl.Result{
		Requeue:      true,
		RequeueAfter: requeueAfter,
	}, nil
}

func (r *ACLReconciler) setUnreadyStatus(ctx context.Context, acl *v1alpha1.ACL, reason string) error {
	l := log.FromContext(ctx)

	acl.Status.Ready = false
	acl.Status.Reason = reason

	err := r.Client.Status().Update(ctx, acl)
	if err != nil {
		l.Error(err, "could not update acl status")
	}
	return err
}

func (r *ACLReconciler) podSelectorForSource(source v1alpha1.ACLSpecSource) map[string]string {
	if source.TsuruApp != "" {
		return map[string]string{
			"tsuru.io/app-name": source.TsuruApp,
		}
	}

	if source.RpaasInstance != nil {
		return map[string]string{
			"rpaas.extensions.tsuru.io/instance-name": source.RpaasInstance.Instance,
			"rpaas.extensions.tsuru.io/service-name":  source.RpaasInstance.ServiceName,
		}
	}

	return nil
}

func (r *ACLReconciler) egressRulesForDestination(ctx context.Context, destination v1alpha1.ACLSpecDestination) ([]netv1.NetworkPolicyEgressRule, error) {
	if destination.TsuruApp != "" {
		return r.egressRulesForTsuruApp(ctx, destination.TsuruApp)
	} else if destination.TsuruAppPool != "" {
		return r.egressRulesForTsuruAppPool(ctx, destination.TsuruAppPool)
	} else if destination.ExternalDNS != nil {
		return r.egressRulesForExternalDNS(ctx, destination.ExternalDNS)
	} else if destination.ExternalIP != nil {
		return r.egressRulesForExternalIP(ctx, destination.ExternalIP)
	} else if destination.RpaasInstance != nil {
		return r.egressRulesForRpaasInstance(ctx, destination.RpaasInstance)
	}
	return nil, nil
}

func (r *ACLReconciler) egressRulesForTsuruApp(ctx context.Context, tsuruApp string) ([]netv1.NetworkPolicyEgressRule, error) {
	egress := []netv1.NetworkPolicyEgressRule{
		{
			To: []netv1.NetworkPolicyPeer{
				{
					PodSelector: &metav1.LabelSelector{
						MatchLabels: r.podSelectorForTsuruApp(tsuruApp),
					},
					// NamespaceSelector: nil, TODO: use namespace selector, the major advantage is to reduce number of pods processed by calico
				},
			},
		},
	}

	return egress, nil
}

func (r *ACLReconciler) egressRulesForTsuruAppPool(ctx context.Context, tsuruAppPool string) ([]netv1.NetworkPolicyEgressRule, error) {
	egress := []netv1.NetworkPolicyEgressRule{
		{
			To: []netv1.NetworkPolicyPeer{
				{
					PodSelector: &metav1.LabelSelector{
						MatchLabels: map[string]string{
							"tsuru.io/app-pool": tsuruAppPool,
						},
					},
					// NamespaceSelector: nil, TODO: use namespace selector, the major advantage is to reduce number of pods processed by calico
				},
			},
		},
	}

	return egress, nil
}

func (r *ACLReconciler) egressRulesForExternalDNS(ctx context.Context, externalDNS *v1alpha1.ACLSpecExternalDNS) ([]netv1.NetworkPolicyEgressRule, error) {
	l := log.FromContext(ctx)

	if isWildCard(externalDNS.Name) {
		return nil, nil
	}

	existingDNSEntry, err := r.ensureDNSEntry(ctx, externalDNS.Name)

	if err != nil {
		l.Error(err, "could not get ACLDNSEntry", "destination", externalDNS.Name)
		return nil, err
	}

	if !existingDNSEntry.Status.Ready {
		l.Info("DNSEntry is not ready yet")
		return nil, nil
	}

	to := []netv1.NetworkPolicyPeer{}
	for _, ip := range existingDNSEntry.Status.IPs {

		var cidr string
		if strings.Contains(ip.Address, ":") {
			cidr = ip.Address + "/128"
		} else if strings.Contains(ip.Address, ".") {
			cidr = ip.Address + "/32"
		} else {
			continue
		}

		to = append(to, netv1.NetworkPolicyPeer{IPBlock: &netv1.IPBlock{
			CIDR: cidr,
		}})
	}

	egress := []netv1.NetworkPolicyEgressRule{
		{
			To:    to,
			Ports: r.ports(externalDNS.Ports),
		},
	}

	return egress, nil
}

func (r *ACLReconciler) egressRulesForExternalIP(ctx context.Context, externalIP *v1alpha1.ACLSpecExternalIP) ([]netv1.NetworkPolicyEgressRule, error) {
	egress := []netv1.NetworkPolicyEgressRule{
		{
			To: []netv1.NetworkPolicyPeer{
				{
					IPBlock: &netv1.IPBlock{
						CIDR: externalIP.IP,
					},
				},
			},
			Ports: r.ports(externalIP.Ports),
		},
	}

	return egress, nil
}

func (r *ACLReconciler) egressRulesForRpaasInstance(ctx context.Context, rpaasInstance *v1alpha1.ACLSpecRpaasInstance) ([]netv1.NetworkPolicyEgressRule, error) {
	return nil, nil
}

func (r *ACLReconciler) ensureDNSEntry(ctx context.Context, host string) (*v1alpha1.ACLDNSEntry, error) {
	l := log.FromContext(ctx)

	existingDNSEntry := &v1alpha1.ACLDNSEntry{}
	resourceName := host // TODO: use shortly function to reduce size of name
	err := r.Client.Get(ctx, types.NamespacedName{
		Name: resourceName,
	}, existingDNSEntry)

	if k8sErrors.IsNotFound(err) {
		dnsEntry := &v1alpha1.ACLDNSEntry{
			ObjectMeta: metav1.ObjectMeta{
				Name: resourceName,
			},
			Spec: v1alpha1.ACLDNSEntrySpec{
				Host: host,
			},
		}

		err = r.Client.Create(ctx, dnsEntry)
		if err != nil {
			l.Error(err, "could not create ACLDNSEntry object")
			return nil, err
		}

		subReconciler := &ACLDNSEntryReconciler{
			Client:   r.Client,
			Scheme:   r.Scheme,
			Resolver: DefaultResolver,
		}

		_, err = subReconciler.Reconcile(ctx, ctrl.Request{
			NamespacedName: types.NamespacedName{
				Name: dnsEntry.Name,
			},
		})

		if err != nil {
			l.Error(err, "could not sub-reconcicle DNSEntry", "dnsEntryName", resourceName)
			return nil, err
		}

		err = r.Client.Get(ctx, types.NamespacedName{
			Name: resourceName,
		}, existingDNSEntry)
		return existingDNSEntry, err
	} else if err != nil {
		l.Error(err, "could not get ACLDNSEntry", "dnsEntryName", resourceName)
		return nil, err
	}

	return existingDNSEntry, nil
}

func (r *ACLReconciler) ports(p []v1alpha1.ProtoPort) []netv1.NetworkPolicyPort {
	result := []netv1.NetworkPolicyPort{}
	for _, port := range p {
		var protocol *corev1.Protocol
		if port.Protocol != "" {
			p := corev1.Protocol(strings.ToUpper(port.Protocol))
			protocol = &p
		}

		portNumber := intstr.FromInt(int(port.Number))
		result = append(result, netv1.NetworkPolicyPort{
			Protocol: protocol,
			Port:     &portNumber,
		})
	}
	return result
}

func (r *ACLReconciler) podSelectorForTsuruApp(tsuruApp string) map[string]string {
	return map[string]string{
		"tsuru.io/app-name": tsuruApp,
	}
}

// SetupWithManager sets up the controller with the Manager.
func (r *ACLReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&v1alpha1.ACL{}).
		Complete(r)
}

func isWildCard(name string) bool {
	return name != "" && name[0] == '.'
}

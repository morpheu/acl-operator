/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"
	"reflect"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"

	v1alpha1 "github.com/tsuru/acl-operator/api/v1alpha1"
	netv1 "k8s.io/api/networking/v1"
	k8sErrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ACLReconciler reconciles a ACL object
type ACLReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=extensions.tsuru.io,resources=acls/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the ACL object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.12.1/pkg/reconcile
func (r *ACLReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx)

	acl := &v1alpha1.ACL{}
	err := r.Client.Get(ctx, req.NamespacedName, acl)
	if k8sErrors.IsNotFound(err) {
	} else if err != nil {
		l.Error(err, "could not get ACL object")
		return ctrl.Result{}, err
	}

	networkPolicy := &netv1.NetworkPolicy{}
	networkPolicyName := acl.Status.NetworkPolicy
	if networkPolicyName == "" {
		networkPolicyName = "acl-" + req.Name
	}

	err = r.Client.Get(ctx, client.ObjectKey{
		Namespace: req.Namespace,
		Name:      networkPolicyName,
	}, networkPolicy)

	if k8sErrors.IsNotFound(err) {
	} else if err != nil {
		l.Error(err, "could not get NetworkPolicy object")
		return ctrl.Result{}, err
	}

	networkPolicyHasChanges := false
	statusNeedsUpdate := false
	networkPolicy.ObjectMeta.Namespace = acl.ObjectMeta.Namespace
	networkPolicy.ObjectMeta.Name = networkPolicyName

	if len(networkPolicy.OwnerReferences) == 0 {
		networkPolicy.OwnerReferences = []v1.OwnerReference{
			*metav1.NewControllerRef(acl, acl.GroupVersionKind()),
		}

		networkPolicyHasChanges = true
	}

	podSelector := r.podSelectorForSource(acl.Spec.Source)
	if podSelector == nil {
		l.Info("No podSelector generated by spec.source")
		return ctrl.Result{}, nil
	}
	if !reflect.DeepEqual(networkPolicy.Spec.PodSelector.MatchLabels, podSelector) {
		networkPolicy.Spec.PodSelector.MatchLabels = podSelector
		networkPolicyHasChanges = true
	}

	newEgressRules := []netv1.NetworkPolicyEgressRule{}
	for _, destination := range acl.Spec.Destinations {
		egressRules := r.egressRulesForDestination(ctx, destination)
		newEgressRules = append(newEgressRules, egressRules...)
	}

	if len(newEgressRules) == 0 {
		l.Info("No egress generated by spec.destinations")
		return ctrl.Result{}, nil
	}

	if !reflect.DeepEqual(networkPolicy.Spec.Egress, newEgressRules) {
		networkPolicy.Spec.Egress = newEgressRules
		networkPolicyHasChanges = true

	}

	if networkPolicy.CreationTimestamp.IsZero() {
		err = r.Client.Create(ctx, networkPolicy)
		if err != nil {
			l.Error(err, "could not create NetworkPolicy object")
			return ctrl.Result{}, err
		}
		l.Info("NetworkPolicy object has been created")

		acl.Status.NetworkPolicy = networkPolicy.Name
		statusNeedsUpdate = true

	} else if networkPolicyHasChanges {
		err = r.Client.Update(ctx, networkPolicy)
		if err != nil {
			l.Error(err, "could not update NetworkPolicy object")
			return ctrl.Result{}, err
		}

		l.Info("NetworkPolicy object has been updated")

		acl.Status.NetworkPolicy = networkPolicy.Name
		statusNeedsUpdate = true
	}

	if statusNeedsUpdate {
		err = r.Client.Status().Update(ctx, acl)
		if err != nil {
			l.Error(err, "could not update status for ACL object")
			return ctrl.Result{}, err
		}
	}

	return ctrl.Result{}, nil
}

func (r *ACLReconciler) podSelectorForSource(source v1alpha1.ACLSpecSource) map[string]string {
	if source.TsuruApp != "" {
		return map[string]string{
			"tsuru.io/app-name": source.TsuruApp,
		}
	}

	if source.RpaasInstance != nil {
		return map[string]string{
			"rpaas.extensions.tsuru.io/instance-name": source.RpaasInstance.Instance,
			"rpaas.extensions.tsuru.io/service-name":  source.RpaasInstance.ServiceName,
		}
	}

	return nil
}

func (r *ACLReconciler) egressRulesForDestination(ctx context.Context, destination v1alpha1.ACLSpecDestination) []netv1.NetworkPolicyEgressRule {
	if destination.TsuruApp != "" {
		return r.egressRulesForTsuruApp(ctx, destination.TsuruApp)
	} else if destination.TsuruAppPool != "" {
		return r.egressRulesForTsuruAppPool(ctx, destination.TsuruAppPool)
	} else if destination.ExternalDNS != nil {
		return r.egressRulesForExternalDNS(ctx, destination.ExternalDNS)
	} else if destination.ExternalIP != nil {
		return r.egressRulesForExternalIP(ctx, destination.ExternalIP)
	} else if destination.RpaasInstance != nil {
		return r.egressRulesForRpaasInstance(ctx, destination.RpaasInstance)
	}
	return nil
}

func (r *ACLReconciler) egressRulesForTsuruApp(ctx context.Context, tsuruApp string) []netv1.NetworkPolicyEgressRule {
	return nil
}

func (r *ACLReconciler) egressRulesForTsuruAppPool(ctx context.Context, tsuruAppPool string) []netv1.NetworkPolicyEgressRule {
	return nil
}

func (r *ACLReconciler) egressRulesForExternalDNS(ctx context.Context, externalDNS *v1alpha1.ACLSpecExternalDNS) []netv1.NetworkPolicyEgressRule {
	return nil
}

func (r *ACLReconciler) egressRulesForExternalIP(ctx context.Context, externalDNS *v1alpha1.ACLSpecExternalIP) []netv1.NetworkPolicyEgressRule {
	return nil
}

func (r *ACLReconciler) egressRulesForRpaasInstance(ctx context.Context, rpaasInstance *v1alpha1.ACLSpecSourceRpaasInstance) []netv1.NetworkPolicyEgressRule {
	return nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *ACLReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&v1alpha1.ACL{}).
		Complete(r)
}
